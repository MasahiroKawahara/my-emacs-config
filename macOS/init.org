* 【セットアップ方法】
** Emacsをインストール
#+begin_src bash
brew install --cask emacs
#+end_src
** 各種アセットのダウンロード
*** yasnippet-snippets
#+begin_src bash
cd ~/.emacs.d
git clone https://github.com/AndreaCrotti/yasnippet-snippets
#+end_src
** init.el および init.org を作成
「 [[~/.emacs.d/init.el]] 」に以下内容を追加する。
#+begin_example
(require 'org)
(defvar org-dir "~/org/")
(org-babel-load-file (expand-file-name "init.org" org-dir))
#+end_example

その後、このファイルを「 ~/org/init.org 」に配置する。
* 基本設定
** 必要なパッケージをインストールする
[[https://emacs-jp.github.io/packages/package][package: パッケージ管理ツール | Emacs JP]]
#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")
        ("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)

;;;; インストールするパッケージ
(defvar my/favorite-packages
  '(
    ;;;; shell
    exec-path-from-shell

    ;;;; face, theme
    persistent-scratch zenburn-theme

    ;;;; git
    magit

    ;;;; counsel (+ ivy, swiper)
    counsel

    ;;;; company, yasnippet
    company yasnippet

    ;;;; languages
    markdown-mode terraform-mode yaml-mode
    ))

;;;; my/favorite-packagesからインストールしていないパッケージをインストール
; my-setup-package-install: インストールされていないものがある場合は t
(setq my-setup-package-install nil)
(dolist (package my/favorite-packages)
 (unless (package-installed-p package)
    (setq my-setup-package-install t)))

; my-setup-package-install が t の場合は package-refresh-contents
(if my-setup-package-install
  (package-refresh-contents))

; インストールされていないパッケージをインストール
(dolist (package my/favorite-packages)
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

*** COMMENT old
#+begin_src emacs-lisp
(require 'package)
(setq package-install-upgrade-built-in t)
;; package-archivesを上書き
(setq package-archives
      '(("melpa" . "http://melpa.org/packages/")
        ;; ("melpa-stable" . "https://stable.melpa.org/packages/")
        ("org" . "http://orgmode.org/elpa/")
        ("gnu" . "http://elpa.gnu.org/packages/")))

;; 初期化
(package-initialize)
#+end_src
** シェル環境変数を設定する
[[https://github.com/purcell/exec-path-from-shell][GitHub - purcell/exec-path-from-shell: Make Emacs use the $PATH set up by the user&#39;s shell]]
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC
** 自動保存バックアップの場所を指定する
#+BEGIN_SRC emacs-lisp
;; 自動保存されるバックアップファイルの置き場所を ~/.emacs.d/backup に変更する
(setq backup-directory-alist
  (cons (cons ".*" (expand-file-name "~/.emacs.d/backup"))
        backup-directory-alist))
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name "~/.emacs.d/backup/") t)))
#+END_SRC
** カスタムファイルを指定する
- [[https://ayatakesi.github.io/emacs/24.5/Saving-Customizations.html][GNU Emacs Manual(Japanese Translation): Saving Customizations]]
#+begin_src emacs-lisp
;; カスタムファイルの指定
(setq custom-file "~/.emacs.d/custom.el")
#+end_src

* ディスプレイ、サウンド
** テーマ
[[https://github.com/bbatsov/zenburn-emacs][GitHub - bbatsov/zenburn-emacs: The Zenburn colour theme ported to Emacs]]
#+begin_src emacs-lisp
(load-theme 'zenburn t)
#+end_src
** モードライン
[[https://ayatakesi.github.io/emacs/24.5/Optional-Mode-Line.html][GNU Emacs Manual(Japanese Translation): Optional Mode Line]]
*** 行番号を表示する
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC

** フリンジ
[[https://ayatakesi.github.io/emacs/24.5/Fringes.html][GNU Emacs Manual(Japanese Translation): Fringes]]
*** 行表示 (org-modeが重たくなるため基本的にOFF)
#+BEGIN_SRC emacs-lisp
;; (global-linum-mode t)
;; (set-face-attribute 'linum nil :foreground "#fe4b4b" :height 0.9)
#+END_SRC

** ツールバー
[[https://ayatakesi.github.io/emacs/25.1/Tool-Bars.html][GNU Emacs Manual(Japanese Translation): Tool Bars]]
*** 非表示にする
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
** スタートアップ画面(scratch)
*** 起動時の Emacsロゴ、メッセージを出さない
[[https://ayatakesi.github.io/lispref/24.5/html/Startup-Summary.html][GNU Emacs Lisp Reference Manual: Startup Summary]]
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
*** scratch バッファの初期メッセージを消す
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "")
#+END_SRC
*** scratch バッファの状態を保存する
#+BEGIN_SRC emacs-lisp
(persistent-scratch-setup-default)
#+END_SRC
** サウンド
*** メッセージ音を出さない
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** 他装飾
*** 空白文字を強調
#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
#+END_SRC

*** 対応する括弧のハイライト
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

* フォント、エンコード
** フォント・等幅設定
[[https://memo.sugyan.com/entry/20120828/1346082898][フォント設定にface-font-rescale-alistを使う - すぎゃーんメモ]]
[[http://extra-vision.blogspot.com/2016/07/emacs.html][Out of Dimension: Emacs のフォント設定を克服する]]
#+BEGIN_SRC emacs-lisp
; for ASCII
(create-fontset-from-ascii-font
 "Menlo-14:weight=normal:slant=normal"
 nil
 "menlokakugo")

(set-fontset-font
 "fontset-menlokakugo"
 'unicode
 (font-spec :family "Hiragino Kaku Gothic ProN")
 nil
 'append)

(add-to-list 'default-frame-alist '(font . "fontset-menlokakugo"))
(setq face-font-rescale-alist '(("Hiragino.*" . 1.2)))
#+END_SRC
** デフォルトエンコーディング
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(setq coding-system-for-write 'utf-8)
#+END_SRC
* 操作
** 全般
*** CUAモードを有効にする
[[https://ayatakesi.github.io/emacs/24.5/CUA-Bindings.html#CUA-Bindings][GNU Emacs Manual(Japanese Translation): CUA Bindings]]
- C-<return> :: cua-set-rectangle-mark
#+begin_src emacs-lisp
(cua-mode t)
(setq cua-enable-cua-keys nil)
#+end_src
*** "¥" を "/" に変換する
#+BEGIN_SRC emacs-lisp
(define-key global-map [?¥] [?\\])
#+END_SRC
*** 行頭 C-k(kill-line) で行ごと削除する
#+BEGIN_SRC emacs-lisp
(setq kill-whole-line t)
#+END_SRC
*** 括弧の自動ペアリング
#+begin_src emacs-lisp
(electric-pair-mode 0)
#+end_src
*** 保存前に末尾の空白をすべて削除する
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Useless-Whitespace.html][Useless Whitespace (GNU Emacs Manual)]]
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** キーバインド
*** Command キー活用
#+BEGIN_SRC emacs-lisp
;; using Command as Alt
(global-set-key (kbd "s-r") 'revert-buffer)
(global-set-key (kbd "s-v") 'scroll-down)
(global-set-key (kbd "s-f") 'right-word)
(global-set-key (kbd "s-b") 'left-word)
(global-set-key (kbd "s-x") 'counsel-M-x)
(global-set-key (kbd "s-w") 'kill-ring-save)
(global-unset-key (kbd "s-t"))
#+END_SRC

*** スクロールアップ、ダウン(C-v, M-v)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-v") 'scroll-up)
(global-set-key (kbd "M-v") 'scroll-down)
#+END_SRC

*** バックスペース(C-h)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-h") 'delete-backward-char)
#+END_SRC

*** バッファを閉じる(C-x C-k)
#+BEGIN_SRC emacs-lisp
(defun my-kill-current-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))
(define-key global-map (kbd "C-x C-k") 'my-kill-current-buffer)
#+END_SRC

*** ウィンドウ切替(C-x C-o)
#+BEGIN_SRC emacs-lisp
;; ※ C-x o と同じ
(global-set-key (kbd "C-x C-o") 'other-window)
#+END_SRC
*** C-l 活用
**** C-l(recenter) 解除
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-l"))
#+END_SRC
**** C-l C-c --> 画面中央移動
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-l C-c") 'recenter)
#+END_SRC
**** C-l C-l --> 文字列置換
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-l C-l") 'replace-string)
#+END_SRC
**** C-l C-p --> 文字列置換(正規表現)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-l C-p") 'replace-regexp)
#+END_SRC
**** C-l C-o --> ウィンドウ切替
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-l C-o") 'other-window)
#+END_SRC
**** C-l C-b --> バッファ切替
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-l C-b") 'switch-to-buffer)
#+END_SRC
**** C-l C-f --> 全バッファ文字列検索
#+BEGIN_SRC emacs-lisp
(defun multi-occur-in-matching-all-buffers(reg)
  (interactive "sstring: ")
  (multi-occur-in-matching-buffers ".*" reg)
)
(global-set-key (kbd "C-l C-f") 'multi-occur-in-matching-all-buffers)
#+END_SRC
**** C-l C-[8/9/,] --> マクロ
#+BEGIN_SRC emacs-lisp
;; C-l C-8 > マクロ記録開始
;; C-l C-9 > マクロ記録終了
;; C-l C-, > マクロ呼び出し
(global-set-key (kbd "C-l C-8") 'kmacro-start-macro)
(global-set-key (kbd "C-l C-9") 'kmacro-end-macro)
(global-set-key (kbd "C-l C-,") 'kmacro-end-and-call-macro)
#+END_SRC
**** [ref] C-l C-m --> magit-status
[[magit]]
**** [ref] C-l C-s --> org-mode: クリップボード画像貼り付け
[[org-mode: クリップボード画像貼り付け(C-l C-s)]]
**** [ref] C-l ! --> org-mode: org-time-stamp-inactive
[[タイムスタンプ: org-time-stamp-inactive (C-l !)]]
**** [ref] C-l C-e C-m --> org-mode: org-md-export-as-markdown
[[Markdown変換: org-md-export-as-markdown(C-l C-e C-m)]]
**** [ref] C-l C-7 --> コードブロック編集: org-edit-special
[[コードブロック編集: org-edit-special (C-l C-7)]]
*** [ref] Org-mode
[[Org キーバインド]]
*** [ref] counsel
[[counsel]]
*** [ref] company
[[company]]

* ツール
** ivy, counsel, swiper
- [[https://oremacs.com/swiper/#introduction][Ivy User Manual]]
- [[https://github.com/abo-abo/swiper][GitHub - abo-abo/swiper: Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview, and more. Oh, man!]]
# [[https://qiita.com/tadsan/items/33ebb8db2271897a462b][君は誰とEmacsる？ (補完インターフェイス紹介篇) - Qiita]]
#+begin_src emacs-lisp
(ivy-mode 1)
(counsel-mode 1)
(setq ivy-height 20)
(setq ivy-count-format "(%d/%d) ")
; (global-set-key (kbd "C-s") 'swiper-isearch)
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
#+end_src
** company
[[https://company-mode.github.io/][company-mode for Emacs]]
#+begin_src emacs-lisp
(require 'company)
(global-company-mode)
;; behavior
(setq company-minimum-prefix-length 2)
(setq company-idle-delay 0)
(setq company-selection-wrap-around t)

;; backend
(setq company-dabbrev-downcase nil)

;; yasnippetとの連携
(defvar company-mode/enable-yas t
  "Enable yasnippet for all backends.")
(defun company-mode/backend-with-yas (backend)
  (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))
(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+end_src

** yasnippet
- [[https://joaotavora.github.io/yasnippet/][Yet another snippet extension]]
- [[https://github.com/joaotavora/yasnippet?tab=readme-ov-file][GitHub - joaotavora/yasnippet: A template system for Emacs]]
- [[https://github.com/AndreaCrotti/yasnippet-snippets][GitHub - AndreaCrotti/yasnippet-snippets: a collection of yasnippet snippets for many languages]]
#+begin_src emacs-lisp
(yas-global-mode 1)
(setq yas-snippet-dirs
      '( "~/.emacs.d/snippets"                    ;; personal snippets
         "~/.emacs.d/yasnippet-snippets/snippets" ;; https://github.com/AndreaCrotti/yasnippet-snippets
        ))
#+end_src

* 言語
- [[https://github.com/jrblevin/markdown-mode][GitHub - jrblevin/markdown-mode: Emacs Markdown Mode]]
- [[https://github.com/hcl-emacs/terraform-mode][GitHub - hcl-emacs/terraform-mode: Major mode of Terraform configuration file]]
- [[https://github.com/emacs-typescript/typescript.el][GitHub - emacs-typescript/typescript.el: TypeScript-support for Emacs]]
