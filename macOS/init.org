* 【セットアップ方法】
  - 「~/.emacs.d/init.el」を作成。以下内容を追加
    #+begin_example
    (require 'org-install)
    (defvar my-config-dir "~/org/")
    (org-babel-load-file (expand-file-name "init.org" my-config-dir))
    #+end_example
  - このファイル(~/org/init.org)を編集する
** 参考
    - [[http://blog.lambda-consulting.jp/2015/11/20/article/][俺、ちゃんと全部管理してます（org-modeでinit.elを管理する） | lambda consulting]]
    - [[https://emacs-jp.github.io/tips/emacs-in-2020][2020年代のEmacs入門 | Emacs JP]]
* 基本設定
** パッケージインストール
   [[https://qiita.com/sijiaoh/items/057b682dd29fbbdadd52][Emacs 起動時にパッケージを自動でインストールする方法 - Qiita]]
   #+begin_src emacs-lisp
(require 'package)
(setq package-archives
  '(("gnu" . "https://elpa.gnu.org/packages/")
     ("melpa" . "https://melpa.org/packages/")
     ("org" . "http://orgmode.org/elpa/")))
(package-initialize)

(defun require-package (package &optional min-version no-refresh)
  "Install given PACKAGE, optionally requiring MIN-VERSION.
If NO-REFRESH is non-nil, the available package lists will not be
re-downloaded in order to locate PACKAGE."
  (if (package-installed-p package min-version)
    t
    (if (or (assoc package package-archive-contents) no-refresh)
      (if (boundp 'package-selected-packages)
        ;; Record this as a package the user installed explicitly
        (package-install package nil)
        (package-install package))
      (progn
        (package-refresh-contents)
        (require-package package min-version t)))))

(defun maybe-require-package (package &optional min-version no-refresh)
  "Try to install PACKAGE, and return non-nil if successful.
In the event of failure, return nil and print a warning message.
Optionally require MIN-VERSION.  If NO-REFRESH is non-nil, the
available package lists will not be re-downloaded in order to
locate PACKAGE."
  (condition-case err
    (require-package package min-version no-refresh)
    (error
      (message "Couldn't install optional package `%s': %S" package err)
      nil)))
   #+end_src
#    #+BEGIN_SRC emacs-lisp
# (require 'package)
#  
#  
# (require 'package)
# (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
#                     (not (gnutls-available-p))))
#        (proto (if no-ssl "http" "https")))
#   (when no-ssl (warn "\
# Your version of Emacs does not support SSL connections,
# which is unsafe because it allows man-in-the-middle attacks.
# There are two things you can do about this warning:
# 1. Install an Emacs version that does support SSL and be safe.
# 2. Remove this warning from your init file so you won't see it again."))
#   (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
#   ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
#   ;; and `package-pinned-packages`. Most users will not need or want to do this.
#   ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
#   )
#  
# ;; MELPA-stableを追加
# (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#  
# ;; Added by Package.el.  This must come before configurations of
# ;; installed packages.  Don't delete this line.  If you don't want it,
# ;; just comment it out by adding a semicolon to the start of the line.
# ;; You may delete these explanatory comments.
# (package-initialize)
#    #+END_SRC
** パス設定
   #+begin_src emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/site_lisp")
   #+end_src
** シェル環境変数設定
   [[https://monologu.com/exec-path-from-shell-on-emacs/][Emacsにシェルの環境変数をexec-path-from-shellで設定する - アナグマのモノローグ]]
   #+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
   #+END_SRC
** 自動保存バックアップ場所設定
   #+BEGIN_SRC emacs-lisp
;; 自動保存されるバックアップファイルの置き場所を ~/.emacs.d/backup に変更する
(setq backup-directory-alist 
  (cons (cons ".*" (expand-file-name "~/.emacs.d/backup")) 
        backup-directory-alist)) 
(setq auto-save-file-name-transforms 
      `((".*", (expand-file-name "~/.emacs.d/backup/") t))) 
   #+END_SRC
* ディスプレイ、サウンド
** 非アクティブウィンドウを目立たなくする(auto-dim-other-buffer-mode)
   [[https://github.com/mina86/auto-dim-other-buffers.el][GitHub - mina86/auto-dim-other-buffers.el: Visually makes non-selected windows less prominent]]
   #+begin_src emacs-lisp
(add-hook 'after-init-hook (lambda ()
  (when (fboundp 'auto-dim-other-buffers-mode)
    (auto-dim-other-buffers-mode t))))
   #+end_src
** フレーム
*** 背景色
    #+BEGIN_SRC emacs-lisp
(set-face-background 'default "#fcfcfc")    
    #+END_SRC
*** 透過
    #+begin_src emacs-lisp
(set-frame-parameter nil 'alpha 95)
    #+end_src
*** 起動時に画面左半分にする 
    [[https://fnwiya.hatenablog.com/entry/2015/11/19/212219][emacs を起動時に画面左半分にする]]
    #+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
    (add-hook 'after-init-hook (lambda()
        (set-frame-position (selected-frame) 0 0)
        (set-frame-size (selected-frame) 120 65)))
)
    #+END_SRC
** モードライン
*** 時刻表示
    #+BEGIN_SRC emacs-lisp
(setq display-time-interval 60)
(setq display-time-string-forms
      '((format "Now: %s:%s %s/%s(%s)" 24-hours minutes month day dayname)))
(setq display-time-day-and-date t)
(display-time-mode t)
    #+END_SRC
*** 行番号表示
   #+BEGIN_SRC emacs-lisp
(column-number-mode t)
   #+END_SRC
** フリンジ
*** 行表示(org-modeが重たくなる)
   #+BEGIN_SRC emacs-lisp
;; (global-linum-mode t) 
;; (set-face-attribute 'linum nil :foreground "#fe4b4b" :height 0.9)
   #+END_SRC
** ツールバー
*** 非表示
   #+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
   #+END_SRC
** スタートアップ画面(scratch)
*** 起動時の Emacsロゴ、メッセージを出さない
    #+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)     
    #+END_SRC
*** scratch バッファの初期メッセージを消す
    #+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "")       
    #+END_SRC
*** scratch バッファの状態を保存する
   #+BEGIN_SRC emacs-lisp
(persistent-scratch-setup-default)
   #+END_SRC
** サウンド
*** メッセージ音を出さない
    #+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)   
    #+END_SRC
** 他装飾
*** 対応する括弧のハイライト
    #+BEGIN_SRC emacs-lisp
(show-paren-mode t)    
    #+END_SRC
* フォント、エンコード
** 等幅設定
   [[https://memo.sugyan.com/entry/20120828/1346082898][フォント設定にface-font-rescale-alistを使う - すぎゃーんメモ]]
   #+BEGIN_SRC emacs-lisp
(create-fontset-from-ascii-font
 "Menlo-14:weight=normal:slant=normal"
 nil
 "menlokakugo")
 
(set-fontset-font
 "fontset-menlokakugo"
 'unicode
 (font-spec :family "Hiragino Kaku Gothic ProN")
 nil
 'append)
 
(add-to-list 'default-frame-alist '(font . "fontset-menlokakugo"))
(setq face-font-rescale-alist '(("Hiragino.*" . 1.2)))   
   #+END_SRC
** デフォルトエンコーディング
   #+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(setq coding-system-for-write 'utf-8)   
   #+END_SRC
* キー操作
** 全般
*** CUAモード有効(C-Return)
    #+begin_src emacs-lisp
(cua-mode t) 
(setq cua-enable-cua-keys nil) 
    #+end_src
*** "¥" を "/" に変換
    #+BEGIN_SRC emacs-lisp
(define-key global-map [?¥] [?\\])    
    #+END_SRC
*** 行頭 C-k(kill-line) で行ごと削除
    #+BEGIN_SRC emacs-lisp
(setq kill-whole-line t)    
    #+END_SRC
** キーバインド
*** Command キー活用
    #+BEGIN_SRC emacs-lisp
;; using Command as Alt
(global-set-key (kbd "s-v") 'scroll-down) 
(global-set-key (kbd "s-f") 'right-word) 
(global-set-key (kbd "s-b") 'left-word)
(global-set-key (kbd "s-x") 'counsel-M-x)
(global-set-key (kbd "s-w") 'kill-ring-save)
(global-unset-key (kbd "s-t"))    
    #+END_SRC
*** スクロールアップ、ダウン(C-v, M-v)
    #+BEGIN_SRC emacs-lisp
;; C-v > Scroll up
(global-set-key (kbd "C-v") 'scroll-up) 

;; M-v > Scroll down
(global-set-key (kbd "M-v") 'scroll-down)     
    #+END_SRC
*** バックスペース(C-h)
    #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-h") 'delete-backward-char)     
    #+END_SRC
*** バッファを閉じる(C-x C-k)
    #+BEGIN_SRC emacs-lisp
(defun my-kill-current-buffer () 
  (interactive) 
  (kill-buffer (current-buffer))) 
(define-key global-map (kbd "C-x C-k") 'my-kill-current-buffer)    
    #+END_SRC
*** ウィンドウ切替(C-x C-o)
    #+BEGIN_SRC emacs-lisp
;; ※ C-x o と同じ
(global-set-key (kbd "C-x C-o") 'other-window)     
    #+END_SRC
*** バッファリストとバッファリストを入れ替える(C-x b, C-x C-b)
    #+BEGIN_SRC emacs-lisp
;; C-x b   --> list-buffers
;; C-x C-b --> switch-to-buffer
(global-unset-key (kbd "C-x C-b")) 
(global-set-key (kbd "C-x C-b") 'switch-to-buffer) 
(global-unset-key (kbd "C-x b")) 
(global-set-key (kbd "C-x b") 'list-buffers)     
    #+END_SRC
*** C-l 活用
**** C-l(recenter) 解除
    #+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-l"))
    #+END_SRC
**** C-l C-c --> 画面中央移動
     #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-l C-c") 'recenter)     
     #+END_SRC
**** C-l C-l --> 文字列置換
     #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-l C-l") 'replace-string)     
     #+END_SRC
**** C-l C-l --> 文字列置換(正規表現)
     #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-l C-p") 'replace-regexp)     
     #+END_SRC
**** C-l C-o --> ウィンドウ切替
     #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-l C-o") 'other-window)     
     #+END_SRC
**** C-l C-b --> バッファ切替
     #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-l C-b") 'switch-to-buffer)     
     #+END_SRC
**** C-l C-f --> 全バッファ文字列検索
     #+BEGIN_SRC emacs-lisp
(defun multi-occur-in-matching-all-buffers(reg)
  (interactive "sstring: ")
  (multi-occur-in-matching-buffers ".*" reg)
)
(global-set-key (kbd "C-l C-f") 'multi-occur-in-matching-all-buffers)     
     #+END_SRC
**** C-l C-[8/9/,] --> マクロ
     #+BEGIN_SRC emacs-lisp
;; C-l C-8 > マクロ記録開始
;; C-l C-9 > マクロ記録終了
;; C-l C-, > マクロ呼び出し
(global-set-key (kbd "C-l C-8") 'kmacro-start-macro) 
(global-set-key (kbd "C-l C-9") 'kmacro-end-macro) 
(global-set-key (kbd "C-l C-,") 'kmacro-end-and-call-macro)      
     #+END_SRC
*** aa
    #+BEGIN_SRC emacs-lisp
    
    #+END_SRC
*** aa
    #+BEGIN_SRC emacs-lisp
    
    #+END_SRC
*** aa
    #+BEGIN_SRC emacs-lisp
    
    #+END_SRC
*** aa
    #+BEGIN_SRC emacs-lisp
    
    #+END_SRC
* ツール
** ediff
   - [[https://w.atwiki.jp/ntemacs/pages/80.html][ediff をスマートに使うための設定 - NTEmacs @ ウィキ - atwiki（アットウィキ）]]
   - [[https://www.gnu.org/software/emacs/manual/html_node/ediff/Highlighting-Difference-Regions.html][7.5 Highlighting Difference Regions]]
   #+begin_src emacs-lisp
;; コントロール用のバッファを同一フレーム内に表示
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
;; diffのバッファを上下ではなく左右に並べる
(setq ediff-split-window-function 'split-window-horizontally)

;; ハイライト
(add-hook 'ediff-load-hook
           (lambda ()
             (set-face-foreground
               ediff-current-diff-face-B "blue")
             (set-face-background
               ediff-current-diff-face-B "red")
             (make-face-italic
               ediff-current-diff-face-B)))
   #+end_src
** magit
   [[https://qiita.com/maueki/items/70dbf62d8bd2ee348274][【Emacs】 magitチュートリアル - Qiita]]
   #+begin_src emacs-lisp
   (global-set-key (kbd "C-l C-m") 'magit-status)
   #+end_src
** counsel
   [[https://qiita.com/tadsan/items/33ebb8db2271897a462b][君は誰とEmacsる？ (補完インターフェイス紹介篇) - Qiita]]
   #+begin_src emacs-lisp
   (ivy-mode 1) ;; デフォルトの入力補完がivyになる
   (counsel-mode 1)
   (setq ivy-height 20) ;; minibufferのサイズを拡大

   ;; M-x, C-x C-fなどのEmacsの基本的な組み込みコマンドをivy版にリマップする
   ;;; 下記は任意で有効化
   (global-set-key "\C-s" 'swiper)
   (global-set-key (kbd "C-c C-r") 'ivy-resume)
   (global-set-key (kbd "<f6>") 'ivy-resume)
   (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
   (global-set-key (kbd "C-c g") 'counsel-git)
   (global-set-key (kbd "C-c j") 'counsel-git-grep)
   (global-set-key (kbd "C-c k") 'counsel-ag)
   (global-set-key (kbd "C-x l") 'counsel-locate)
   (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)

   ;; これらは counsel-mode で自動で設定されるため、明示的に設定しなくてよい
   ;;(global-set-key (kbd "M-x") 'counsel-M-x)
   ;;(global-set-key (kbd "C-x C-f") 'counsel-find-file)
   ;;(global-set-key (kbd "<f1> f") 'counsel-describe-function)
   ;;(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
   ;;(global-set-key (kbd "<f1> l") 'counsel-load-library)
   ;;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
   ;;(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
   #+end_src
** yasnippet
   参考: https://joaotavora.github.io/yasnippet/snippet-development.html#org7f07002
   #+BEGIN_SRC emacs-lisp
 (add-to-list 'load-path
               "~/.emacs.d/plugins/yasnippet")
 (require 'yasnippet)

 (setq yas-snippet-dirs
       '(  "~/.emacs.d/snippets"                 ;; personal snippets
         "~/.emacs.d/elpa/yasnippet-snippets-0.14/snippets"
         ))
 (yas-global-mode 1)
   #+END_SRC
** flycheck
   [[https://www.flycheck.org/en/latest/user/quickstart.html][Quickstart — Flycheck 32-cvs documentation]]
   #+begin_src emacs-lisp
   (global-flycheck-mode)
   ; (add-hook 'after-init-hook #'global-flycheck-mode)
   #+end_src

   #+RESULTS:
   : t
*** cfn lint
    https://www.emacswiki.org/emacs/CfnLint
    #+begin_src emacs-lisp
 ;; Set up a mode for JSON based templates

 (define-derived-mode cfn-json-mode js-mode
     "CFN-JSON"
     "Simple mode to edit CloudFormation template in JSON format."
     (setq js-indent-level 2))

 (add-to-list 'magic-mode-alist
              '("\\({\n *\\)? *[\"']AWSTemplateFormatVersion" . cfn-json-mode))

 ;; Set up a mode for YAML based templates if yaml-mode is installed
 ;; Get yaml-mode here https://github.com/yoshiki/yaml-mode
 (when (featurep 'yaml-mode)

   (define-derived-mode cfn-yaml-mode yaml-mode
     "CFN-YAML"
     "Simple mode to edit CloudFormation template in YAML format.")
  
   (add-to-list 'magic-mode-alist
                '("\\(---\n\\)?AWSTemplateFormatVersion:" . cfn-yaml-mode)))

 ;; Set up cfn-lint integration if flycheck is installed
 ;; Get flycheck here https://www.flycheck.org/
 (when (featurep 'flycheck)
   (flycheck-define-checker cfn-lint
     "AWS CloudFormation linter using cfn-lint.

 Install cfn-lint first: pip install cfn-lint

 See `https://github.com/aws-cloudformation/cfn-python-lint'."

     :command ("cfn-lint" "-f" "parseable" source)
     :error-patterns ((warning line-start (file-name) ":" line ":" column
                               ":" (one-or-more digit) ":" (one-or-more digit) ":"
                               (id "W" (one-or-more digit)) ":" (message) line-end)
                      (error line-start (file-name) ":" line ":" column
                             ":" (one-or-more digit) ":" (one-or-more digit) ":"
                             (id "E" (one-or-more digit)) ":" (message) line-end))
     :modes (cfn-json-mode cfn-yaml-mode))

   (add-to-list 'flycheck-checkers 'cfn-lint)
   (add-hook 'cfn-json-mode-hook 'flycheck-mode)
   (add-hook 'cfn-yaml-mode-hook 'flycheck-mode))
    #+end_src

    #+RESULTS:
    | flycheck-mode |

*** COMMENT cfn-mode
   https://www.emacswiki.org/emacs/cfn-mode.el
   pip install cfn-lint
   #+begin_src emacs-lisp
 (when (featurep 'yaml-mode)

   (define-derived-mode cfn-mode yaml-mode
     "Cloudformation"
     "Cloudformation template mode.")
  
   (add-to-lisst 'magic-mode-alist
                '("\\(---\n\\)?AWSTemplateFormatVersion:" . cfn-mode))

   (when (featurep 'flycheck)
     (flycheck-define-checker cfn-lint
       "AWS CloudFormation linter using cfn-lint.

 Install cfn-lint first: pip install cfn-lint

 See `https://github.com/aws-cloudformation/cfn-python-lint'."

       :command ("cfn-lint" "-f" "parseable" source)
       :error-patterns ((warning line-start (file-name) ":" line ":" column
                                 ":" (one-or-more digit) ":" (one-or-more digit) ":"
                                 (id "W" (one-or-more digit)) ":" (message) line-end)
                        (error line-start (file-name) ":" line ":" column
                               ":" (one-or-more digit) ":" (one-or-more digit) ":"
                               (id "E" (one-or-more digit)) ":" (message) line-end))
       :modes (cfn-mode))

     (add-to-list 'flycheck-checkers 'cfn-lint)
     (add-hook 'cfn-mode-hook 'flycheck-mode)))
   #+end_src

   #+RESULTS:
   | flycheck-mode |
  
** company
   [[https://qiita.com/blue0513/items/c0dc35a880170997c3f5][Emacsの補完と検索を超強化する - Qiita]]
   #+BEGIN_SRC emacs-lisp  
 (require 'company)
 (global-company-mode) ; 全バッファで有効にする
 (setq company-transformers '(company-sort-by-backend-importance)) ;; ソート順
 (setq company-idle-delay 0) ; デフォルトは0.5
 (setq company-minimum-prefix-length 3) ; デフォルトは4
 (setq company-selection-wrap-around t) ; 候補の一番下でさらに下に行こうとすると一番上に戻る
 (setq completion-ignore-case t)
 (setq company-dabbrev-downcase nil)
 (global-set-key (kbd "C-M-i") 'company-complete)
 (define-key company-active-map (kbd "C-n") 'company-select-next) ;; C-n, C-pで補完候補を次/前の候補を選択
 (define-key company-active-map (kbd "C-p") 'company-select-previous)
 (define-key company-search-map (kbd "C-n") 'company-select-next)
 (define-key company-search-map (kbd "C-p") 'company-select-previous)
 (define-key company-active-map (kbd "C-s") 'company-filter-candidates) ;; C-sで絞り込む
 (define-key company-active-map (kbd "C-i") 'company-complete-selection) ;; TABで候補を設定
 (define-key company-active-map [tab] 'company-complete-selection) ;; TABで候補を設定
 (define-key company-active-map (kbd "C-f") 'company-complete-selection) ;; C-fで候補を設定
 (define-key emacs-lisp-mode-map (kbd "C-M-i") 'company-complete) ;; 各種メジャーモードでも C-M-iで company-modeの補完を使う

 ;; yasnippetとの連携
 (defvar company-mode/enable-yas t
   "Enable yasnippet for all backends.")
 (defun company-mode/backend-with-yas (backend)
   (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
       backend
     (append (if (consp backend) backend (list backend))
             '(:with company-yasnippet))))
 (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))

 (defun edit-category-table-for-company-dabbrev (&optional table)
   (define-category ?s "word constituents for company-dabbrev" table)
   (let ((i 0))
     (while (< i 128)
       (if (equal ?w (char-syntax i))
       (modify-category-entry i ?s table)
     (modify-category-entry i ?s table t))
       (setq i (1+ i)))))
 (edit-category-table-for-company-dabbrev)
 ;; (add-hook 'TeX-mode-hook 'edit-category-table-for-company-dabbrev) ; 下の追記参照
 (setq company-dabbrev-char-regexp "\\cs")
   #+END_SRC
*** COMMENT company-jedi
    https://github.com/syohex/emacs-company-jedi
    #+BEGIN_SRC emacs-lisp 
    (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

    (cadd-hook 'python-mode-hook 'my/python-mode-hook)
    #+END_SRC
** smart-mode-line
   - [[https://github.com/Malabarba/smart-mode-line][GitHub - Malabarba/smart-mode-line: A powerful and beautiful mode-line for Emacs.]]
   - [[https://qiita.com/blue0513/items/99476f4ae51f17600636][EmacsのMode Lineを強化する - Qiita]]
   #+BEGIN_SRC emacs-lisp
   (setq sml/no-confirm-load-theme t)

   (setq powerline-arrow-shape 'curve)
   (setq powerline-default-separator-dir '(right . left))

   (setq sml/theme 'light-powerline)

   (sml/setup)
   #+END_SRC

   #+RESULTS:

* 言語
** markdown-mode
   #+begin_src emacs-lisp
(require 'markdown-mode)
(add-to-list 'auto-mode-alist'("\\.md\\'" . markdown-mode))
   #+end_src
** terraform-mode
  #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path
              "~/.emacs.d/plugins/terraform-mode")
(require 'terraform-mode)
  #+END_SRC
** COMMENT typescript-mode
   #+begin_src emacs-lisp
 ; (package-install 'typescript-mode)
 (require 'typescript-mode)
 (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
   #+end_src

   #+RESULTS:
   : ((\.ts\' . typescript-mode) (\.ts$ . typescript-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.ps1\' . powershell-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

   #+begin_src emacs-lisp
 (defun setup-tide-mode ()
   (interactive)
   (tide-setup)
   (flycheck-mode +1)
   (setq flycheck-check-syntax-automatically '(save mode-enabled))
   (eldoc-mode +1)
   (tide-hl-identifier-mode +1)
   ;; company is an optional dependency. You have to
   ;; install it separately via package-install
   ;; `M-x package-install [ret] company`
   (company-mode +1))

 ;; aligns annotation to the right hand side
 (setq company-tooltip-align-annotations t)

 ;; formats the buffer before saving
 (add-hook 'before-save-hook 'tide-format-before-save)

 (add-hook 'typescript-mode-hook #'setup-tide-mode)
   #+end_src

   #+RESULTS:
   | setup-tide-mode |

* Org-mode
  #+begin_src emacs-lisp
(require 'org)
  #+end_src
** 基本設定
*** リストをデフォルトで展開しない
    #+begin_src emacs-lisp
(setq org-cycle-include-plain-lists 'integrate)
    #+end_src
*** リストの階層を変更する際に文字を変える
    [[https://yiufung.net/post/org-mode-hidden-gems-pt1/][Org-mode Hidden Gems - 01 Document Structure]]
    #+begin_src emacs-lisp
    (setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))
    #+end_src
*** ファイルを開く際は同じウィンドウ上で開く
    #+begin_src emacs-lisp
(setq org-link-frame-setup '((file . find-file)))
    #+end_src
*** インデントのタブ無効化
    #+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
    #+end_src
*** スピードコマンドを利用する
    [[https://qiita.com/takaxp/items/a5a3383d7358c58240d0][org-mode のキーバインド、その先 - Qiita]]
    #+begin_src emacs-lisp
(setq org-use-speed-commands t)
    #+end_src
*** 省略エリア(...)の編集防止
    [[https://yiufung.net/post/org-mode-hidden-gems-pt1/][Org-mode Hidden Gems - 01 Document Structure]]
    #+begin_src emacs-lisp
    (setq org-catch-invisible-edits 'show-and-error)
    #+end_src
** キーバインド
*** org-capture (C-cc)
    #+begin_src emacs-lisp
(global-set-key "\C-cc" 'org-capture)
    #+end_src
*** org-store-link (C-c l)
    #+begin_src emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
    #+end_src
*** org-agenda (C-ca)
    #+begin_src emacs-lisp
(define-key global-map "\C-ca" 'org-agenda)
    #+end_src
*** Markdown変換: org-md-export-as-markdown(C-l C-e C-m)
    #+begin_src emacs-lisp
(global-set-key (kbd "C-l C-e C-m") 'org-md-export-as-markdown) 
    #+end_src
*** 次見出し作成: org-insert-heading (C-S-ret)
    #+begin_src emacs-lisp
(define-key org-mode-map (kbd "<C-S-return>") nil)
(define-key org-mode-map (kbd "<C-S-return>") 'org-insert-heading) 
    #+end_src
*** org-meta-return (M-m, s-m)
    #+begin_src emacs-lisp
;; org-meta-return (= M-RET)
(define-key org-mode-map (kbd "M-m") nil)
(define-key org-mode-map (kbd "M-m") 'org-meta-return) 
(define-key org-mode-map (kbd "s-m") 'org-meta-return) 
    #+end_src
*** タイムスタンプ: org-time-stamp-inactive (C-l !)
    #+BEGIN_SRC emacs-lisp
;; org-time-stamp-inactive (flycheck 競合対策)
(global-set-key (kbd "C-l !") 'org-time-stamp-inactive)
    #+END_SRC
** Org Agenda
*** アジェンダ対象ファイル設定
    #+begin_src emacs-lisp
(setq org-directory "~/org/")
(setq org-agenda-files (list org-directory))
    #+end_src
*** TODOキーワード設定
    #+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w)" "REMIND(r)" "PROJECT(p)" "--SUBPJ(2)" "TREATED(e)" "DOING(n)" "ROUTINE(x)" "|" "DONE(d)" "SOMEDAY(s)")))
(setq org-todo-keyword-faces
      '(("PROJECT" . (:foreground "red" :background "cyan" :weight bold))
        ("--SUBPJ" . (:foreground "dark red" :background "SkyBlue1" :weight bold))
        ("WAIT" . (:foreground "orange" :weight bold))
        ("REMIND" . (:foreground "darkgreen" :weight bold))
        ("TREATED" . (:foreground "darkblue" :weight bold))
        ("ROUTINE" . (:foreground "darkblue" :weight bold))
        ("DOING" . (:foreground "red" :background "yellow1" :weight bold))
        ))
    #+end_src
*** DONEとなった時間を記録する
    #+begin_src emacs-lisp
(setq org-log-done 'time)
    #+end_src
*** 同じウィンドウ上にアジェンダ表示
    #+begin_src emacs-lisp
(setq org-agenda-window-setup 'current-window)
    #+end_src
*** アジェンダ表示で下線を使用
    [[https://tamura70.hatenadiary.org/entry/20100208/org][Emacs org-modeを使ってみる: (6) アジェンダ表示 - 屯遁のパズルとプログラミングの日記]]
    #+begin_src emacs-lisp
(add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))
(setq hl-line-face 'underline)
    #+end_src
*** 標準の祝日を利用しない
    [[https://tamura70.hatenadiary.org/entry/20100208/org][Emacs org-modeを使ってみる: (6) アジェンダ表示 - 屯遁のパズルとプログラミングの日記]]
    #+begin_src emacs-lisp
(setq calendar-holidays nil)
    #+end_src
** Org Capture
   #+begin_src emacs-lisp
(setq org-capture-templates
      '(
        ("t" "Todo" entry (file+headline "~/org/remind.org" "PROJECT [#C]  REMIND ----------------------")
	 "* REMIND [#C] %? (wrote on %U)")
	("k" "Knowledge" entry (file+headline "~/org/knowledge.org" "TOP")
	 "* %?\n  # Wrote on %U")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* today i did%?")
         ))
   #+end_src
** Org Babel
*** コード実行時に confirm しない
    #+begin_src emacs-lisp
    (setq org-confirm-babel-evaluate nil)
    #+end_src
*** 実行できる言語設定
    #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (emacs-lisp . t)
       (shell . t)
       )
    )	  
    #+END_SRC
** エクスポート
*** htmlize
    [[https://qiita.com/daddygongon/items/298e3e351bf15cfaa699][emacs26.1にしてorg-to-htmlしたらemacs-htmlizeを入れなさいって． - Qiita]]
    #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/site_lisp/emacs-htmlize")
    (require 'htmlize)
    #+END_SRC
*** org-reveal
    [[https://dev.classmethod.jp/articles/org-mode-re-reveal/][【Org-mode】Org文書から reveal.js スライドを作成する #Emacs | DevelopersIO]]
    #+BEGIN_SRC emacs-lisp
    (require 'org-re-reveal)
    (setq org-re-reveal-root "file:///Users/kawahara.masahiro/.emacs.d/plugins/reveal.js")
    #+END_SRC
** ツール
*** org-bullets
    [[https://github.com/sabof/org-bullets][GitHub - sabof/org-bullets: utf-8 bullets for org-mode]]
    #+begin_src emacs-lisp
    (require 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    #+end_src
*** org-tree-slide
    [[https://qiita.com/takaxp/items/8dfb5d34dfcd79f9fa5c][org-modeのツリーでスライドショー - Qiita]]
    #+begin_src emacs-lisp
    (require 'org-tree-slide)
    (define-key org-mode-map (kbd "<f8>") 'org-tree-slide-mode)
    (define-key org-mode-map (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
    (setq org-tree-slide-slide-in-effect nil)
    (setq org-tree-slide-header nil)
    #+end_src
* Huck
** org-mode: md変換時のHTMLリンクのフォーマット変更
   [[https://github.com/bzg/org-mode/blob/master/lisp/ox-md.el][org-mode/ox-md.el at master · bzg/org-mode · GitHub]]
   #+BEGIN_SRC emacs-lisp
     (require 'ox-md)
     (defun org-md-link (link contents info)
       "Transcode LINE-BREAK object into Markdown format.
     CONTENTS is the link's description.  INFO is a plist used as
     a communication channel."
       (let ((link-org-files-as-md
              (lambda (raw-path)
                ;; Treat links to `file.org' as links to `file.md'.
                (if (string= ".org" (downcase (file-name-extension raw-path ".")))
                    (concat (file-name-sans-extension raw-path) ".md")
                  raw-path)))
             (type (org-element-property :type link)))
         (cond
          ;; Link type is handled by a special function.
          ((org-export-custom-protocol-maybe link contents 'md))
          ((member type '("custom-id" "id" "fuzzy"))
           (let ((destination (if (string= type "fuzzy")
                                  (org-export-resolve-fuzzy-link link info)
                                (org-export-resolve-id-link link info))))
             (pcase (org-element-type destination)
               (`plain-text			; External file.
                (let ((path (funcall link-org-files-as-md destination)))
                  (if (not contents) (format "<%s>" path)
                    (format "[%s](%s)" contents path))))
               (`headline
                (format
                 "[%s](#%s)"
                 ;; Description.
                 (cond ((org-string-nw-p contents))
                       ((org-export-numbered-headline-p destination info)
                        (mapconcat #'number-to-string
                                   (org-export-get-headline-number destination info)
                                   "."))
                       (t (org-export-data (org-element-property :title destination)
                                           info)))
                 ;; Reference.
                 (or (org-element-property :CUSTOM_ID destination)
                     (org-export-get-reference destination info))))
               (_
                (let ((description
                       (or (org-string-nw-p contents)
                           (let ((number (org-export-get-ordinal destination info)))
                             (cond
                              ((not number) nil)
                              ((atom number) (number-to-string number))
                              (t (mapconcat #'number-to-string number ".")))))))
                  (when description
                    (format "[%s](#%s)"
                            description
                            (org-export-get-reference destination info))))))))
          ((org-export-inline-image-p link org-html-inline-image-rules)
           (let ((path (let ((raw-path (org-element-property :path link)))
                         (cond ((not (equal "file" type)) (concat type ":" raw-path))
                               ((not (file-name-absolute-p raw-path)) raw-path)
                               (t (expand-file-name raw-path)))))
                 (caption (org-export-data
                           (org-export-get-caption
                            (org-export-get-parent-element link)) info)))
             (format "![img](%s)"
                     (if (not (org-string-nw-p caption)) path
                       (format "%s \"%s\"" path caption)))))
          ((string= type "coderef")
           (let ((ref (org-element-property :path link)))
             (format (org-export-get-coderef-format ref contents)
                     (org-export-resolve-coderef ref info))))
          ((equal type "radio") contents)
          (t (let* ((raw-path (org-element-property :path link))
                    (path
                     (cond
                      ((member type '("http" "https" "ftp" "mailto"))
                       (concat type ":" raw-path))
                      ((string= type "file")
                       (org-export-file-uri (funcall link-org-files-as-md raw-path)))
                      (t raw-path))))
               (if (not contents) (format "<%s>" path)
                 ;; (format "[%s](%s)" contents path)))))))
                 (format "<a href=\"%s\" target=\"_blank\" rel=\"noopener noreferrer\">%s</a>" path contents)))))))
   #+END_SRC
** org-mode: md変換時の下線のフォーマット変更
   #+begin_src emacs-lisp
(add-to-list 'org-html-text-markup-alist '(underline . "<u>%s</u>"))
   #+end_src
** org-mode: クリップボード画像をバッファに貼り付ける(C-l C-s)
   [[https://dev.classmethod.jp/articles/org-mode-paste-show-clipboard-image/][【Org-mode】クリップボードの画像をお手軽にインライン表示する #Emacs | DevelopersIO]]
   #+begin_src emacs-lisp
(defun my-org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat "/Users/kawahara.masahiro/org/img/"
                  ; (buffer-name)
                  "sc_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (call-process "pngpaste" nil nil nil filename)
  (call-process "pngquant" nil nil nil  "--ext .png --force --speed 1" filename)
  (call-process "resize.sh" nil nil nil filename)
  (insert (concat "[[file+sys:" filename "]]"))
  (org-display-inline-images))

  (global-set-key (kbd "C-l C-s") 'my-org-screenshot)
   #+end_src
* End
  #+BEGIN_SRC emacs-lisp
;; カレントディレクトリを ~/org に変更。
(cd "~/org/")

;; *scratch* バッファを org-modeに
(org-mode)

;; 色調整
(set-face-attribute 'org-mode-line-clock nil :background "systemRedColor" :foreground "black")
(set-face-attribute 'org-block nil :background "LightCyan1" :foreground "gray10")
(set-face-attribute 'org-code nil :background "LightCyan1" :foreground "gray10")
  #+END_SRC

  #+RESULTS:
* COMMENT ARCHIVE
** COMMENT package
   #+BEGIN_SRC emacs-lisp
(require 'package)
 
 
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  )
 
;; MELPA-stableを追加
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
 
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)
   #+END_SRC
** COMMENT ido-mode
   #+BEGIN_SRC text
 (ido-mode t)

 (setq ido-enable-flex-matching t)

 (require 'ido-vertical-mode)
 (ido-vertical-mode 1)
 (setq ido-vertical-define-keys 'C-n-and-C-p-only)

 (global-set-key (kbd "M-x") 'smex)
 (global-set-key (kbd "M-X") 'smex-major-mode-commands)

 ;; C-s > ido-occur
 (global-unset-key (kbd "C-s")) 
 (global-set-key (kbd "C-s") 'ido-occur) 
   #+END_SRC

** SOMEDAY COMMENT Jedi
   CLOSED: [2019-11-26 Tue 13:31]
   http://tkf.github.io/emacs-jedi/latest/
*** Requirement
    - [X] EPC
      https://github.com/kiwanami/emacs-epc
      > dependency installed
    - [X] deferred.el (> v0.3)
      https://github.com/kiwanami/emacs-deferred
      > dependency installed
    - [ ] auto-complete
      https://github.com/auto-complete/auto-complete
      > M-x package-install [RET] auto-complete [RET]
    - [X] popup.el
    - [ ] python-environment.el
**** auto-complete
     #+BEGIN_SRC emacs-lisp
 (require 'auto-complete)
 (require 'auto-complete-config)
 ;; (require 'fuzzy) ;; fuzzy search (heaby)
 ;; (setq ac-use-fuzzy t)
 (global-auto-complete-mode t)
 (ac-config-default)
 (setq ac-delay 0) ;; 補完候補表示までの時間
 (setq ac-auto-show-menu 0.05) ;; ヒント表示までの時間
 (ac-set-trigger-key "TAB")
 (setq ac-use-menu-map t)
 ; (setq ac-menu-height 25) ;; ちょっと大きめにとりましょう！
 ; (setq ac-auto-start 2) ;; 個人的には3でもいいかも
 (setq ac-ignore-case t)
 (define-key ac-completing-map (kbd "<tab>") 'ac-complete)

 ;; ac-source（要するにどうやって補完候補を選ぶか）
 ; (setq-default ac-sources 'ac-source-words-in-same-mode-buffers)
 ; (setq-default ac-sources (push 'ac-source-yasnippet ac-sources))


 ;;    (require 'auto-complete-config)
 ;;    (ac-config-default)
 ;;    ;; (add-to-list 'ac-modes 'org-mode)
 ;;    (ac-set-trigger-key "TAB")
 ;;    (setq ac-use-menu-map t)       ;; 補完メニュー表示時にC-n/C-pで補完候補選択
 ;;    ;; (setq ac-use-fuzzy t)
 ;;    (setq ac-auto-show-menu 0.03)
     #+END_SRC

     #+RESULTS:
     : ac-complete
*** Jedi
    test: file:~/tmp/sample.py
    - package-install > jedi
    #+BEGIN_SRC emacs-lisp
    (require 'jedi)
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)
    (add-hook 'python-mode-hook 'jedi:ac-setup)
    #+END_SRC

   
    #+RESULTS:
    | jedi:ac-setup | jedi:setup | (lambda nil (set (make-local-variable (quote yas-indent-line)) (quote fixed))) |

** COMMENT latex
   #+BEGIN_SRC emacs-lisp
   ;; (require 'ox-latex)
   (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
   #+END_SRC

** COMMENT publish
   #+begin_src emacs-lisp
(setq org-publish-project-alist
      '(("my-study.org"
         :base-directory "~/org/public/"
         :publishing-directory "~/org/public_html"
         :section-numbers nil
         :table-of-contents nil
         :publishing-function org-html-publish-to-html
         :section-numbers nil
         :auto-sitemap t
         :recursive t
         :sitemap-file-entry-format "%d %t"
         :html-head "
         <link rel=\"stylesheet\" type=\"text/css\" href=\"https://fniessen.github.io/org-html-themes/styles/readtheorg/css/htmlize.css\"/>
         <link rel=\"stylesheet\" type=\"text/css\" href=\"https://fniessen.github.io/org-html-themes/styles/readtheorg/css/readtheorg.css\"/>
         <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>
         <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\"></script>
         <script type=\"text/javascript\" src=\"https://fniessen.github.io/org-html-themes/styles/lib/js/jquery.stickytableheaders.min.js\"></script>
         <script type=\"text/javascript\" src=\"https://fniessen.github.io/org-html-themes/styles/readtheorg/js/readtheorg.js\"></script>
         "
         ; :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"/Users/kawahara.masahiro/org/public_html/org-html-themes/styles/readtheorg/css/readtheorg.css\" />"
         )))
  #+END_SRC

** COMMENT org-gfm
    #+BEGIN_SRC emacs-lisp
(eval-after-load "org"
  '(require 'ox-gfm nil t))    
    #+END_SRC
